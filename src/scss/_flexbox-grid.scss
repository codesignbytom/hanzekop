/* ------------------------------
   Flex Container Setup
   ------------------------------ */

.flex {
  display: flex;

  @each $suffix, $value in $flex-direction-classes {
    &-#{$suffix} {
      flex-direction: $value;
    }
  }

  @each $suffix, $value in $flex-wrap-classes {
    &-#{$suffix} {
      flex-wrap: $value;
    }
  }
}

/* Global Gap Utilities */
// Define gap utilities applicable for both grid and flex containers
@each $suffix, $value in $sizes {
  .gap-#{$suffix} {
    gap: $value;
  }
}

/* ------------------------------
     Justification Utilities
     ------------------------------ */

/* Justification Utilities */
// Loop for each justification type
@each $prefix,
  $classes
    in (
      "justify-content": $justify-content-classes,
      "justify-self": $justify-self-classes,
      "justify-items": $justify-items-classes
    )
{
  @each $suffix, $value in $classes {
    .#{$prefix}-#{$suffix} {
      #{$prefix}: $value;
    }
  }
}

/* ------------------------------
     Grid Container Setup
     ------------------------------ */

.grid {
  display: grid;
}

// Generating grid template columns, rows, span, and start/end classes
@for $i from 1 through 12 {
  .grid-cols-#{$i} {
    grid-template-columns: repeat($i, minmax(0, 1fr));
  }
  .grid-rows-#{$i} {
    grid-template-rows: repeat($i, minmax(0, 1fr));
  }

  .col-span-#{$i} {
    grid-column: span #{$i};
  }
  .row-span-#{$i} {
    grid-row: span #{$i};
  }

  .col-start-#{$i} {
    grid-column-start: #{$i};
  }
  .col-end-#{$i} {
    grid-column-end: #{$i};
  }
  .row-start-#{$i} {
    grid-row-start: #{$i};
  }
  .row-end-#{$i} {
    grid-row-end: #{$i};
  }
}

/* Additional Grid Utilities */
// Adjusted to directly apply additional grid layout styles
@each $prefix,
  $map
    in (
      "grid-flow": $grid-flows,
      "auto-cols": $auto-cols,
      "auto-rows": $auto-rows,
      "content": $align-content,
      "self": $self-align,
      "place-content": $place-content,
      "place-items": $place-items,
      "place-self": $place-self
    )
{
  @each $suffix, $value in $map {
    .#{$prefix}-#{$suffix} {
      #{$prefix}: $value;
    }
  }
}

/* ------------------------------
     Order Utilities
     ------------------------------ */

// Ordering classes
@for $i from 1 through 12 {
  .order-#{$i} {
    order: $i;
  }
}
.order-first {
  order: -9999;
}
.order-last {
  order: 9999;
}
.order-none {
  order: 0;
}
